/* Autogenerated file. Do not edit manually. */

// TODO: learn how to generate it
import { Account } from "starknet";
import { DojoProvider } from "@dojoengine/core";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export async function setupWorld(provider: DojoProvider) {
    function actions() {
        const contract_name = "home";

        const spawn = async ({ account }: { account: Account }) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "spawn",
                    []
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };

        const startBattle = async ({ account }: { account: Account }) => {
            try {
                const { transaction_hash: txHash } = await provider.execute(
                    account,
                    contract_name,
                    "startBattle",
                    []
                );

                const receipt = provider.provider.waitForTransaction(txHash);

                return { txHash, receipt };
            } catch (error) {
                console.error("Error executing move:", error);
                throw error;
            }
        };

        const nextRound = async ({ account }: { account: Account }) => {
            try {
                const { transaction_hash: txHash } = await provider.execute(
                    account,
                    contract_name,
                    "nextRound",
                    []
                );

                const receipt = provider.provider.waitForTransaction(txHash);

                return { txHash, receipt };
            } catch (error) {
                console.error("Error executing move:", error);
                throw error;
            }
        };

        const refreshAltar = async ({ account }: { account: Account }) => {
            try {
                const { transaction_hash: txHash } = await provider.execute(
                    account,
                    contract_name,
                    "refreshAltar",
                    []
                );

                const receipt = provider.provider.waitForTransaction(txHash);

                return { txHash, receipt };
            } catch (error) {
                console.error("Error executing move:", error);
                throw error;
            }
        };

        return { spawn, startBattle, nextRound, refreshAltar };
    }
    return {
        actions: actions(),
        provider,
    };
}
